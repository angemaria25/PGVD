version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    ports:
      - "29092:9092"
      - "29093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    environment:
      - CLUSTER_NAME=proyecto_oficial
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    ports:
      - "9870:9870"   # Web UI de Namenode
      - "9000:9000"   # HDFS NameNode port
    env_file:
      - ./hadoop.env
    networks:
      - default

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    hostname: datanode
    container_name: datanode
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    depends_on:
      - namenode
    ports:
      - "9864:9864"
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    # command: ["datanode"]

  spark-master:
    image: apache/spark:3.5.0
    hostname: spark-master
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "27077:7077"
    volumes:
      - ./spark-app.py:/opt/spark/work-dir/spark-app.py
    depends_on:
      - namenode
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master", "--host", "spark-master"]

  spark-worker:
    image: apache/spark:3.5.0
    hostname: spark-worker
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]

  spark-streaming:
    image: apache/spark:3.5.0
    hostname: spark-streaming
    container_name: spark-streaming
    depends_on:
      - kafka
      - spark-master
      - namenode
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=raw_tweets
      - HDFS_OUTPUT_PATH=hdfs://namenode:9000/user/sentiment_analysis/streaming_results
      - IVY_HOME=/tmp/.ivy2   # ðŸ‘ˆ Esto obliga a usar /tmp/.ivy2 como cachÃ©
    user: root                # ðŸ‘ˆ Permite escribir donde sea necesario
    volumes:
      - ./spark_streaming.py:/opt/spark/work-dir/spark_streaming.py
      - ./ivy_cache:/tmp/.ivy2   # ðŸ‘ˆ crea carpeta local persistente por si falla descarga
    command:
      [
        "/opt/spark/bin/spark-submit",
        "--master", "spark://spark-master:7077",
        "--packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0",
        "/opt/spark/work-dir/spark_streaming.py"
      ]



  tweet-producer:
    build:
      context: ./app-scripts-producer
      dockerfile: Dockerfile
    container_name: tweet-producer
    command: ["sh", "-c", "sleep 30 && python advanced_producer.py"]
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=raw_tweets
      - TARGET_RATE_PER_MINUTE=100
    networks:
      - default
    volumes:
      - ./data:/app/data


  streamlit-app:
    build:
      context: ./app-dashboard
      dockerfile: Dockerfile
    container_name: streamlit-app
    ports:
      - "8501:8501"
    depends_on:
      - kafka
      - spark-streaming
      - namenode
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=raw_tweets
      - HDFS_OUTPUT_PATH=hdfs://namenode:9000/user/sentiment_analysis/streaming_results
    volumes:
      - ./app-dashboard:/app

volumes:
  hadoop_namenode:
  hadoop_datanode:
